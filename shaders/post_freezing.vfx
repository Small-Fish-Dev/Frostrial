//=========================================================================================================================
// Optional
//=========================================================================================================================
HEADER
{
    DevShader = true;
	CompileTargets = ( IS_SM_50 && ( PC || VULKAN ) );
    Description = "Freezing postprocessing";
}


MODES
{
    Default();
    VrForward();
}

//=========================================================================================================================
COMMON
{
    #include "postprocess/shared.hlsl"
}

//=========================================================================================================================

struct VertexInput
{
	float3 vPositionOs : POSITION < Semantic( PosXyz ); >;
	float2 vTexCoord : TEXCOORD0 < Semantic( LowPrecisionUv ); >;
};

//=========================================================================================================================

struct PixelInput
{
	float2 vTexCoord : TEXCOORD0;


	#if ( PROGRAM == VFX_PROGRAM_VS )
		float4 vPositionPs		: SV_Position;
	#endif

	// PS only
	#if ( ( PROGRAM == VFX_PROGRAM_PS ) )
		float4 vPositionSs		: SV_ScreenPosition;
	#endif

};

//=========================================================================================================================

VS
{
	#include "includes/uv_funcs.hlsl"
	
    PixelInput MainVs( VertexInput i )
    {
        PixelInput o;
        o.vPositionPs = float4(i.vPositionOs.xyz, 1.0f);
        o.vTexCoord = i.vTexCoord;
        return o;
    }
}

//=========================================================================================================================

PS
{
    #include "postprocess/common.hlsl"
    #include "postprocess/functions.hlsl"
	#include "common/proceedural.hlsl"

    RenderState( DepthWriteEnable, false );
    RenderState( DepthEnable, false );

    CreateTexture2D( g_tColorBuffer ) < Attribute( "ColorBuffer" );  	SrgbRead( true ); Filter( MIN_MAG_LINEAR_MIP_POINT ); AddressU( MIRROR ); AddressV( MIRROR ); >;
    CreateTexture2D( g_tDepthBuffer ) < Attribute( "DepthBuffer" ); 	SrgbRead( false ); Filter( MIN_MAG_MIP_POINT ); AddressU( CLAMP ); AddressV( CLAMP ); >;

    CreateInputTexture2D( TextureColor,            Srgb,   8, "",                 "_color",  "Material,10/10", Default3( 1.0, 1.0, 1.0 ) );
    CreateTexture2DWithoutSampler( g_tColor )  < Channel( RGB,  Box( TextureColor ), Srgb ); OutputFormat( BC7 ); SrgbRead( true ); >;
    SamplerState TextureFiltering < Filter( ANISOTROPIC ); MaxAniso( 8 ); >;

    float flFreezeStrength< Attribute("freeze.strength"); Default(0.0f); >;

    float theCircleMask( float2 UV, float EdgeMin, float EdgeMax )
    {
        float2 Offset = UV.xy + (0.5,0.5);
        float cirlce = distance(UV.xy , (0.5, 0.5));
        return 1 - smoothstep(EdgeMin, EdgeMax, cirlce);
    }

    float3 greyscale(float3 color)
    {
        float greyscale = dot(color, float3(0.3, 0.59, 0.11));
        return float3(greyscale, greyscale, greyscale);
    }

    struct PixelOutput
    {
	    float4 vColor : SV_Target0;
    };

    PixelOutput MainPs(PixelInput i)
    {
        PixelOutput o;
        
        // uvs
        float2 vScreenUv = i.vTexCoord.xy - g_vViewportOffset.xy / g_vRenderTargetSize;

        // round expanding black and white vignette mask
        float FreezeMask = 1 - (theCircleMask(vScreenUv, 0.0f, saturate(1 - flFreezeStrength + 0.65)));

        // add image to this (ice), then lerp between a normal and darker version for faking the vignette later on
        float3 ImageOverlay = Tex2DS( g_tColor, TextureFiltering, vScreenUv.xy).rgb;
        ImageOverlay = lerp(ImageOverlay*1.2, ImageOverlay*0.15, saturate((flFreezeStrength -0.2) * 2));

        // add noise to vignette mask (makes holes in the mask that shrink, to make it look like ice is spreading
        float masknoise = (1 - (saturate(Simplex2D(vScreenUv*5)-(0.7 + flFreezeStrength)))) * FreezeMask;

        // current frame normal, blurry and a grey version of the blur, that gets more grey as the strength gets stronger
        float3 vFrameBufferColor = Tex2D( g_tColorBuffer, vScreenUv.xy ).rgb;
        float3 vFrameBufferBlur = GaussianBlur(g_tColorBuffer, TextureFiltering, vScreenUv.xy, 0.013f);
        float3 vFrameBufferFreeze = lerp(vFrameBufferBlur, greyscale(vFrameBufferBlur), saturate(flFreezeStrength));

        // add the ice overlay/blur
        o.vColor.rgb = lerp(vFrameBufferFreeze*0.5, greyscale(ImageOverlay), saturate(masknoise*1.5));

        // then go from normal to that freezing
        o.vColor.rgb = lerp(vFrameBufferColor, o.vColor.rgb, flFreezeStrength);
        o.vColor.a = 1.0f;

        return o;
	}
}